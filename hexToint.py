s

l = []

for i in range(len(s)):
    if s[i] != " ":
        l.append(s[i])

check = []
for i in range(len(l) - 8, len(l)):
    check.append(l[i])
    
for i in range(8):
    l.pop(-1)

check = "".join(check)
s = "".join(l)

#print(s)
#print(check)

out = int(bin(int(s, 16)).zfill(8)[2:], 2)
print(out)

out = bin(int(check, 16)).zfill(8)[2:]
print(out)
out = int(bin(int(check, 16)).zfill(8)[2:], 2)
print(out)

